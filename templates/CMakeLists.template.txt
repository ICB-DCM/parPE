cmake_minimum_required(VERSION 3.15)
cmake_policy(VERSION 3.15...3.30)

set(default_build_type "RelWithDebInfo")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
      STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

set(MODEL_NAME mymodel)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# call project to select language and required by some modules
project(${MODEL_NAME}) # for IDE

find_package(ParPE REQUIRED)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-unused-function -fopenmp")

execute_process(
    COMMAND sh -c "cd ${CMAKE_CURRENT_SOURCE_DIR} && git describe --abbrev=4 --dirty=-dirty --always --tags  | tr -d '\n'"
    OUTPUT_VARIABLE GIT_VERSION
)
message(STATUS "Building version ${GIT_VERSION}")
add_definitions(-DGIT_VERSION="${GIT_VERSION}")

include_directories(${ParPE_INCLUDE_DIRS})


################################################
# AMICI model
################################################

add_subdirectory(model)

#################################
# parameter estimation executable
#################################

project(estimate_${MODEL_NAME})

set(SRC_LIST_EXE main.cpp)

add_executable(${PROJECT_NAME} ${SRC_LIST_EXE})
target_link_libraries(${PROJECT_NAME}
    model
    Upstream::parpe
)

#################################
# simulation executable
#################################

project(simulate_${MODEL_NAME})
set(SRC_LIST main_simulate.cpp)
add_executable(${PROJECT_NAME} ${SRC_LIST})

target_link_libraries(${PROJECT_NAME}
    model
    Upstream::parpe
)
target_include_directories(${PROJECT_NAME} PUBLIC "model" ${ParPE_INCLUDE_DIRS})

#################################
# debugging executable
#################################

project(debug_${MODEL_NAME})
set(SRC_LIST main_debug.cpp)
add_executable(${PROJECT_NAME} ${SRC_LIST})

target_link_libraries(${PROJECT_NAME}
    model
    Upstream::parpe
)
target_include_directories(${PROJECT_NAME} PUBLIC "model")

#################################


#################################
# simulateNominal executable
#################################

project(simulateNominal_${MODEL_NAME})
set(SRC_LIST main_nominal.cpp)
add_executable(${PROJECT_NAME} ${SRC_LIST})

target_link_libraries(${PROJECT_NAME}
    model
    Upstream::parpe
)
target_include_directories(${PROJECT_NAME} PUBLIC "model")

#################################

project(${MODEL_NAME}) # for IDE, will use last project as label
