cmake_minimum_required(VERSION 3.3)

if(POLICY CMP0074)
  # Use package_ROOT environment variables
  cmake_policy(SET CMP0074 NEW)
endif(POLICY CMP0074)

set(default_build_type "RelWithDebInfo")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
      STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

set(MODEL_NAME mymodel)

# call project to select language and required by some modules
project(${MODEL_NAME}) # for IDE

set(BUILD_TESTS FALSE CACHE BOOL "Build tests?")

find_package(Amici REQUIRED)
find_package(ParPE REQUIRED)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -Wall -Wno-unused-function -fopenmp -D_GNU_SOURCE") # -D_GNU_SOURCE for pthread recursive mutex issues

execute_process(COMMAND sh -c "cd ${CMAKE_CURRENT_SOURCE_DIR} && git describe --abbrev=4 --dirty=-dirty --always --tags  | tr -d '\n'" OUTPUT_VARIABLE GIT_VERSION)
message(STATUS "Building version ${GIT_VERSION}")
add_definitions(-DGIT_VERSION="${GIT_VERSION}")

include_directories(${ParPE_INCLUDE_DIRS})

find_package(HDF5 COMPONENTS C CXX HL REQUIRED)

if(${BUILD_TESTS})
    include (CTest)
    set(AMICI_DIR "${CMAKE_CURRENT_LIST_DIR}/../parPE/deps/AMICI/")
    set(CPPUTEST_DIR "${AMICI_DIR}/ThirdParty/cpputest-master/" CACHE PATH "")

    set(CPPUTEST_INCLUDE_DIR "${CPPUTEST_DIR}/include")
    set(CPPUTEST_LIBRARY "${CPPUTEST_DIR}/lib/libCppUTest.a"
        "${CPPUTEST_DIR}/lib/libCppUTestExt.a")
    include_directories(${CPPUTEST_INCLUDE_DIR})
endif(${BUILD_TESTS})

################################################
# AMICI model
################################################

add_subdirectory(model)

# unit tests
if(${BUILD_TESTS})
#    add_subdirectory(tests)
endif(${BUILD_TESTS})


#################################
# parameter estimation executable
#################################

project(estimate_${MODEL_NAME})

set(SRC_LIST_EXE main.cpp)

add_executable(${PROJECT_NAME} ${SRC_LIST_EXE})
target_link_libraries(${PROJECT_NAME}
    model
    Upstream::parpe
)

if(${BUILD_TESTS})
    # Run program with sample data as test
    set(TESTS_MPIEXEC_COMMAND mpiexec -n 4)

    #add_test (NAME ${PROJECT_NAME}
    #    COMMAND ${TESTS_MPIEXEC_COMMAND} ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME} -o deleteme  ${CMAKE_CURRENT_LIST_DIR}/../data/data4c.h5
    #    )
endif(${BUILD_TESTS})

#################################
# simulation executable
#################################

project(simulate_${MODEL_NAME})
set(SRC_LIST main_simulate.cpp)
add_executable(${PROJECT_NAME} ${SRC_LIST})

target_link_libraries(${PROJECT_NAME}
    model
    Upstream::parpe
)
target_include_directories(${PROJECT_NAME} PUBLIC "model" ${ParPE_INCLUDE_DIRS})

#################################
# debugging executable
#################################

project(debug_${MODEL_NAME})
set(SRC_LIST main_debug.cpp)
add_executable(${PROJECT_NAME} ${SRC_LIST})

target_link_libraries(${PROJECT_NAME}
    model
    Upstream::parpe
)
target_include_directories(${PROJECT_NAME} PUBLIC "model")

#################################


#################################
# simulateNominal executable
#################################

project(simulateNominal_${MODEL_NAME})
set(SRC_LIST main_nominal.cpp)
add_executable(${PROJECT_NAME} ${SRC_LIST})

target_link_libraries(${PROJECT_NAME}
    model
    Upstream::parpe
)
target_include_directories(${PROJECT_NAME} PUBLIC "model")

#################################

project(${MODEL_NAME}) # for IDE, will use last project as label
