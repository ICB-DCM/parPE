# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
# https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables
name: Shippable workflow
on: [push]
jobs:
  container:
    runs-on: ubuntu-latest
    container: dweindl/parpeci:1511078
    name: Ship
    steps:
    - uses: actions/checkout@master

    - run: echo "::set-env name=PARPE_BASE::$(pwd)"
    - run: echo "::set-env name=PARPE_BUILD::${PARPE_BASE}/build"
    - run: echo "::set-env name=AMICI_PATH::${PARPE_BASE}/deps/AMICI/"

    - name: info
      run: lsb_release -a && printenv

      # Build dependencies

    - name: Install AMICI deps
      run: |
        cd $AMICI_PATH \
          && scripts/buildSuiteSparse.sh \
          && scripts/buildSundials.sh \
          && scripts/buildCpputest.sh #&& scripts/buildAmici.sh

    - name: Install AMICI
      # with tests:
      # CPPUTEST_BUILD_DIR=${AMICI_PATH}/ThirdParty/cpputest-master/build/
      # -DCppUTest_DIR=${CPPUTEST_BUILD_DIR}
      run: |
        cmake -S ${AMICI_PATH} -B ${AMICI_PATH}/build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DENABLE_PYTHON=ON \
            -DBUILD_TESTS=OFF \
          && cmake --build "${AMICI_PATH}/build" --parallel -- VERBOSE=1

    - name: Install google test
      run: ThirdParty/installGoogleTest.sh

    - name: build parPE
      run: |
        pip install -r ${PARPE_BASE}/python/requirements.txt \

    - run: |
        CC=mpicc CXX=mpiCC cmake \
               -S"${PARPE_BASE}" \
               -B"${PARPE_BUILD}" \
               -DIPOPT_INCLUDE_DIRS=/usr/include/coin/ \
               -DIPOPT_LIBRARIES=/usr/lib/libipopt.so \
               -DCERES_LIBRARIES="/usr/lib/libceres.so;/usr/lib/x86_64-linux-gnu/libglog.so;/usr/lib/x86_64-linux-gnu/libgflags.so" \
               -DCERES_INCLUDE_DIRS="/usr/include/;/usr/include/eigen3" \
               -DMPI_INCLUDE_DIRS=/usr/include/openmpi-x86_64/ \
               -DGCOVR_REPORT=TRUE \
               -DBUILD_TESTS=TRUE

    - name: bla
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo setup sonar cloud \
          && export SONAR_SCANNER_VERSION=4.2.0.1873 \
          && export SONAR_SCANNER_HOME=/root/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux \
          && export PATH=$SONAR_SCANNER_HOME/bin:$PATH \
          && export SONAR_SCANNER_OPTS="-server" \
          && export PATH=/root/.sonar/build-wrapper-linux-x86:$PATH \
        && echo build parpe \
          && build-wrapper-linux-x86-64 --out-dir bw-output \
              cmake --build "${PARPE_BUILD}" --parallel \
                -- VERBOSE=1 \
        && echo submit to sonarcloud \
          && sonar-scanner \
             -Dsonar.cfamily.build-wrapper-output=bw-output \
             -Dsonar.projectVersion="$(git describe --abbrev=4 --dirty=-dirty --always --tags | tr -d '\n')"


    - name: run tests
      run: cd ${PARPE_BUILD} && CTEST_OUTPUT_ON_FAILURE=1 make test

    - name: valgrind
      run: |
        cd ${PARPE_BUILD} \
          && CTEST_OUTPUT_ON_FAILURE=1 make ExperimentalMemCheck; \
          cat Testing/Temporary/MemoryChecker.*.log

    - name: coverage report
      run: |
        cd ${PARPE_BUILD} \
          && CTEST_OUTPUT_ON_FAILURE=1 make parpe_coverage_cobertura

    - run: |
        mkdir -p $PARPE_BASE/shippable/codecoverage \
          && cp $PARPE_BASE/build/parpe_coverage_cobertura.xml \
            $PARPE_BASE/shippable/codecoverage
